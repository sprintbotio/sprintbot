// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

var (
	lockScheduleRepoMockList       sync.RWMutex
	lockScheduleRepoMockSaveUpdate sync.RWMutex
)

// ScheduleRepoMock is a mock implementation of ScheduleRepo.
//
//     func TestSomethingThatUsesScheduleRepo(t *testing.T) {
//
//         // make and configure a mocked ScheduleRepo
//         mockedScheduleRepo := &ScheduleRepoMock{
//             ListFunc: func() ([]*StandupSchedule, error) {
// 	               panic("TODO: mock out the List method")
//             },
//             SaveUpdateFunc: func(teamID string, schedule StandupSchedule) error {
// 	               panic("TODO: mock out the SaveUpdate method")
//             },
//         }
//
//         // TODO: use mockedScheduleRepo in code that requires ScheduleRepo
//         //       and then make assertions.
//
//     }
type ScheduleRepoMock struct {
	// ListFunc mocks the List method.
	ListFunc func() ([]*StandupSchedule, error)

	// SaveUpdateFunc mocks the SaveUpdate method.
	SaveUpdateFunc func(teamID string, schedule StandupSchedule) error

	// calls tracks calls to the methods.
	calls struct {
		// List holds details about calls to the List method.
		List []struct {
		}
		// SaveUpdate holds details about calls to the SaveUpdate method.
		SaveUpdate []struct {
			// TeamID is the teamID argument value.
			TeamID string
			// Schedule is the schedule argument value.
			Schedule StandupSchedule
		}
	}
}

// List calls ListFunc.
func (mock *ScheduleRepoMock) List() ([]*StandupSchedule, error) {
	if mock.ListFunc == nil {
		panic("ScheduleRepoMock.ListFunc: method is nil but ScheduleRepo.List was just called")
	}
	callInfo := struct {
	}{}
	lockScheduleRepoMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockScheduleRepoMockList.Unlock()
	return mock.ListFunc()
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedScheduleRepo.ListCalls())
func (mock *ScheduleRepoMock) ListCalls() []struct {
} {
	var calls []struct {
	}
	lockScheduleRepoMockList.RLock()
	calls = mock.calls.List
	lockScheduleRepoMockList.RUnlock()
	return calls
}

// SaveUpdate calls SaveUpdateFunc.
func (mock *ScheduleRepoMock) SaveUpdate(teamID string, schedule StandupSchedule) error {
	if mock.SaveUpdateFunc == nil {
		panic("ScheduleRepoMock.SaveUpdateFunc: method is nil but ScheduleRepo.SaveUpdate was just called")
	}
	callInfo := struct {
		TeamID   string
		Schedule StandupSchedule
	}{
		TeamID:   teamID,
		Schedule: schedule,
	}
	lockScheduleRepoMockSaveUpdate.Lock()
	mock.calls.SaveUpdate = append(mock.calls.SaveUpdate, callInfo)
	lockScheduleRepoMockSaveUpdate.Unlock()
	return mock.SaveUpdateFunc(teamID, schedule)
}

// SaveUpdateCalls gets all the calls that were made to SaveUpdate.
// Check the length with:
//     len(mockedScheduleRepo.SaveUpdateCalls())
func (mock *ScheduleRepoMock) SaveUpdateCalls() []struct {
	TeamID   string
	Schedule StandupSchedule
} {
	var calls []struct {
		TeamID   string
		Schedule StandupSchedule
	}
	lockScheduleRepoMockSaveUpdate.RLock()
	calls = mock.calls.SaveUpdate
	lockScheduleRepoMockSaveUpdate.RUnlock()
	return calls
}
