// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

var (
	lockTeamRepoMockAddTeam sync.RWMutex
	lockTeamRepoMockDelete  sync.RWMutex
	lockTeamRepoMockGetTeam sync.RWMutex
	lockTeamRepoMockUpdate  sync.RWMutex
)

// TeamRepoMock is a mock implementation of TeamRepo.
//
//     func TestSomethingThatUsesTeamRepo(t *testing.T) {
//
//         // make and configure a mocked TeamRepo
//         mockedTeamRepo := &TeamRepoMock{
//             AddTeamFunc: func(team Team) (string, error) {
// 	               panic("TODO: mock out the AddTeam method")
//             },
//             DeleteFunc: func(id string) error {
// 	               panic("TODO: mock out the Delete method")
//             },
//             GetTeamFunc: func(id string) (*Team, error) {
// 	               panic("TODO: mock out the GetTeam method")
//             },
//             UpdateFunc: func(t *Team) error {
// 	               panic("TODO: mock out the Update method")
//             },
//         }
//
//         // TODO: use mockedTeamRepo in code that requires TeamRepo
//         //       and then make assertions.
//
//     }
type TeamRepoMock struct {
	// AddTeamFunc mocks the AddTeam method.
	AddTeamFunc func(team Team) (string, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(id string) error

	// GetTeamFunc mocks the GetTeam method.
	GetTeamFunc func(id string) (*Team, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(t *Team) error

	// calls tracks calls to the methods.
	calls struct {
		// AddTeam holds details about calls to the AddTeam method.
		AddTeam []struct {
			// Team is the team argument value.
			Team Team
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ID is the id argument value.
			ID string
		}
		// GetTeam holds details about calls to the GetTeam method.
		GetTeam []struct {
			// ID is the id argument value.
			ID string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// T is the t argument value.
			T *Team
		}
	}
}

// AddTeam calls AddTeamFunc.
func (mock *TeamRepoMock) AddTeam(team Team) (string, error) {
	if mock.AddTeamFunc == nil {
		panic("TeamRepoMock.AddTeamFunc: method is nil but TeamRepo.AddTeam was just called")
	}
	callInfo := struct {
		Team Team
	}{
		Team: team,
	}
	lockTeamRepoMockAddTeam.Lock()
	mock.calls.AddTeam = append(mock.calls.AddTeam, callInfo)
	lockTeamRepoMockAddTeam.Unlock()
	return mock.AddTeamFunc(team)
}

// AddTeamCalls gets all the calls that were made to AddTeam.
// Check the length with:
//     len(mockedTeamRepo.AddTeamCalls())
func (mock *TeamRepoMock) AddTeamCalls() []struct {
	Team Team
} {
	var calls []struct {
		Team Team
	}
	lockTeamRepoMockAddTeam.RLock()
	calls = mock.calls.AddTeam
	lockTeamRepoMockAddTeam.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *TeamRepoMock) Delete(id string) error {
	if mock.DeleteFunc == nil {
		panic("TeamRepoMock.DeleteFunc: method is nil but TeamRepo.Delete was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockTeamRepoMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockTeamRepoMockDelete.Unlock()
	return mock.DeleteFunc(id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedTeamRepo.DeleteCalls())
func (mock *TeamRepoMock) DeleteCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockTeamRepoMockDelete.RLock()
	calls = mock.calls.Delete
	lockTeamRepoMockDelete.RUnlock()
	return calls
}

// GetTeam calls GetTeamFunc.
func (mock *TeamRepoMock) GetTeam(id string) (*Team, error) {
	if mock.GetTeamFunc == nil {
		panic("TeamRepoMock.GetTeamFunc: method is nil but TeamRepo.GetTeam was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	lockTeamRepoMockGetTeam.Lock()
	mock.calls.GetTeam = append(mock.calls.GetTeam, callInfo)
	lockTeamRepoMockGetTeam.Unlock()
	return mock.GetTeamFunc(id)
}

// GetTeamCalls gets all the calls that were made to GetTeam.
// Check the length with:
//     len(mockedTeamRepo.GetTeamCalls())
func (mock *TeamRepoMock) GetTeamCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockTeamRepoMockGetTeam.RLock()
	calls = mock.calls.GetTeam
	lockTeamRepoMockGetTeam.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *TeamRepoMock) Update(t *Team) error {
	if mock.UpdateFunc == nil {
		panic("TeamRepoMock.UpdateFunc: method is nil but TeamRepo.Update was just called")
	}
	callInfo := struct {
		T *Team
	}{
		T: t,
	}
	lockTeamRepoMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockTeamRepoMockUpdate.Unlock()
	return mock.UpdateFunc(t)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedTeamRepo.UpdateCalls())
func (mock *TeamRepoMock) UpdateCalls() []struct {
	T *Team
} {
	var calls []struct {
		T *Team
	}
	lockTeamRepoMockUpdate.RLock()
	calls = mock.calls.Update
	lockTeamRepoMockUpdate.RUnlock()
	return calls
}
