// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package team

import (
	"github.com/sprintbot.io/sprintbot/pkg/domain"
	"sync"
)

var (
	lockTeamRepoMockAddTeam sync.RWMutex
)

// TeamRepoMock is a mock implementation of TeamRepo.
//
//     func TestSomethingThatUsesTeamRepo(t *testing.T) {
//
//         // make and configure a mocked TeamRepo
//         mockedTeamRepo := &TeamRepoMock{
//             AddTeamFunc: func(team domain.Team) (string, error) {
// 	               panic("TODO: mock out the AddTeam method")
//             },
//         }
//
//         // TODO: use mockedTeamRepo in code that requires TeamRepo
//         //       and then make assertions.
//
//     }
type TeamRepoMock struct {
	// AddTeamFunc mocks the AddTeam method.
	AddTeamFunc func(team domain.Team) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddTeam holds details about calls to the AddTeam method.
		AddTeam []struct {
			// Team is the team argument value.
			Team domain.Team
		}
	}
}

// AddTeam calls AddTeamFunc.
func (mock *TeamRepoMock) AddTeam(team domain.Team) (string, error) {
	if mock.AddTeamFunc == nil {
		panic("TeamRepoMock.AddTeamFunc: method is nil but TeamRepo.AddTeam was just called")
	}
	callInfo := struct {
		Team domain.Team
	}{
		Team: team,
	}
	lockTeamRepoMockAddTeam.Lock()
	mock.calls.AddTeam = append(mock.calls.AddTeam, callInfo)
	lockTeamRepoMockAddTeam.Unlock()
	return mock.AddTeamFunc(team)
}

// AddTeamCalls gets all the calls that were made to AddTeam.
// Check the length with:
//     len(mockedTeamRepo.AddTeamCalls())
func (mock *TeamRepoMock) AddTeamCalls() []struct {
	Team domain.Team
} {
	var calls []struct {
		Team domain.Team
	}
	lockTeamRepoMockAddTeam.RLock()
	calls = mock.calls.AddTeam
	lockTeamRepoMockAddTeam.RUnlock()
	return calls
}
